package com.proit.servicios;

import java.io.Serializable;
import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;

import com.proit.modelo.TipoFactura;
import com.proit.wicket.FacturarOnLineAuthenticatedWebApplication;

public class TipoFacturaService extends EntidadSimpleService<TipoFactura> implements Serializable {

	private static final long serialVersionUID = 1L;

	public TipoFacturaService() {
		super(TipoFactura.class);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<TipoFactura> getAll() {
		Session session = FacturarOnLineAuthenticatedWebApplication.getHibernateSession();		
		Criteria criteria = session.createCriteria(TipoFactura.class);
		criteria.add(Restrictions.eq("borrado", false));
		criteria.addOrder(Order.asc("nombre"));
		return criteria.list();
	}
	
	/**
	 * Retorna todas menos las C. Retorna A,B, NC A, NC B, ND A, ND B
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public List<TipoFactura> getAllButNoC() {
		Session session = FacturarOnLineAuthenticatedWebApplication.getHibernateSession();		
		Criteria criteria = session.createCriteria(TipoFactura.class);
		criteria.add(Restrictions.ne("id", TipoFactura.TIPO_C.getId()));
		criteria.add(Restrictions.ne("id", TipoFactura.NOTA_CRED_C.getId()));
		criteria.add(Restrictions.ne("id", TipoFactura.NOTA_DEB_C.getId()));
		criteria.add(Restrictions.eq("borrado", false));
		criteria.addOrder(Order.asc("nombre"));
		return criteria.list();
	}

}